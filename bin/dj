#!/usr/bin/env node

const dj = require('../dist/index.cjs')
const yargonaut = require('yargonaut')
const chalk = yargonaut.chalk()

const optionMap = {
  s: 'spacing',
  sb: 'spaceBetweenFullwidthPunctuationAndAlphabets',
  ex: 'successiveExclamationMarks',
  el: 'ellipsisTolerance',
  q: 'replaceWithCornerQuotes',
  p: 'halfwidthParenthesisAroundNumbers'
}

yargonaut.helpStyle('green.underline').errorsStyle('red.bold')

const argv = require('yargs')
  .example('', chalk.cyan('doctor-jones -s --el 3dots 需要格式化的字符串'))
  .group(
    ['s', 'sb', 'ex', 'el', 'q', 'p'],
    chalk.green.underline('Format Options')
  )
  .option('spacing', {
    alias: 's',
    type: 'boolean',
    desc: chalk.cyan('是否在中文和字母数字之间添加空格')
  })
  .option('space-between', {
    alias: 'sb',
    type: 'boolean',
    desc: chalk.cyan('是否允许在全角符号与字母数字之间存在空格')
  })
  .option('exclamation', {
    alias: 'ex',
    type: 'boolean',
    desc: chalk.cyan('是否允许连续的感叹号')
  })
  .option('ellipsis', {
    alias: 'el',
    choices: ['none', '3dots', 'all'],
    requiresArg: true,
    desc: chalk.cyan('省略号规范化规则')
  })
  .option('quote', {
    alias: 'q',
    choices: ['none', 'double', 'single'],
    requiresArg: true,
    desc: chalk.cyan('弯引号替换规则')
  })
  .option('parenthesis', {
    alias: 'p',
    type: 'boolean',
    desc: chalk.cyan('是否在数字周围使用半角括号')
  })
  .option('help', {
    alias: 'h',
    type: 'boolean',
    desc: chalk.cyan('帮助信息')
  })
  .option('version', {
    alias: 'v',
    type: 'boolean',
    desc: chalk.cyan('当前版本')
  }).argv

const options = {}
Object.keys(optionMap).forEach(key => {
  if (argv[key] !== undefined) {
    options[optionMap[key]] = argv[key]
  }
})

argv._.forEach(input => {
  console.log(dj(String(input), options))
})
